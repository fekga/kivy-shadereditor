#:kivy 1.9.1
#: import GLShaderLexer pygments.lexers.GLShaderLexer
#: import Animation kivy.animation.Animation
#: import SlideTransition kivy.uix.screenmanager.SlideTransition
#: import FadeTransition kivy.uix.screenmanager.FadeTransition
#: import OpacityScrollEffect kivy.effects.opacityscroll.OpacityScrollEffect
#: import math math

#<Widget>:
#    canvas.after:
#        Line:
#            rectangle: self.x+1,self.y+1,self.width-1,self.height-1
#            dash_offset: 5
#            dash_length: 3

<ScrollableLabel@ScrollView>:
    text: ''
    Label:
        size_hint_y: None
        height: self.texture_size[1]
        text_size: self.width, None
        text: root.text

GridLayout:
    cols: 2
    FloatLayout:
        FloatLayout:
            id: shader_editor
            BoxLayout:
                orientation: 'vertical'
                ShaderView:
                    id: shader_view
                    disabled: self.disabled_value == 1
                    has_error: bool(self.canvas.shader.success)
                    size_hint_y: 10
                    canvas:
                        Color:
                            rgb: 1,1,1
                        Rectangle:
                            pos: self.pos
                            size: self.size
        FloatLayout:
            id: code_view 
            fs: app.fs
            on_fs: shader_code.text = self.fs;shader_view.fs = self.fs
            opaque: True
            on_opaque: self.opacity = int(self.opaque)
            ScrollView:
                size_hint_y: 1
                bar_width: 10
                effect_cls: OpacityScrollEffect
                CodeInput:
                    id: shader_code
                    lexer: GLShaderLexer()
                    size_hint_y: None
                    height: self.minimum_height
                    cursor_width: '5px'
                    on_text: code_view.fs = self.text; app.fs = self.text
    GridLayout:
        rows: len(self.children)
        size_hint_y: 1
        size_hint_x: .15
        canvas.after:
            Color:
                rgb: 1.-int(shader_view.canvas.shader.success),int(shader_view.canvas.shader.success),0,.5
            Rectangle:
                pos: self.pos
                size: self.width,10
        GridLayout:
            rows: 2
            size_hint_y: None
            Label:
                text: 'Font size'
                size_hint_y: None
                height: 40
            RangeInput:
                size_hint_y: None
                height: 30
                min_value: 5
                max_value: 25
                text: '15'
                on_text: shader_code.font_size = int(self.text)
        GridLayout:
            rows: 2
            size_hint_y: None
            Label:
                text: 'Fader'
                size_hint_y: None
                height: 40
            Slider:
                size_hint_y: None
                height: 20
                max: 1
                value: 1
                on_value: code_view.opacity = self.value
        ToggleButton:
            text: 'Fullscreen'
            size_hint_y: None
            height: 40
            on_state: app.toggle_fullscreen(self.state is 'down')
        Button:
            text: 'Reset'
            size_hint_y: None
            height: 40
            on_release: shader_view.reset_time()
            
        
